#!/usr/bin/env tsx

import { execSync } from 'child_process';
import { writeFileSync } from 'fs';

interface TestSuite {
  name: string;
  command: string;
  description: string;
  critical: boolean;
}

const testSuites: TestSuite[] = [
  {
    name: "G√©n√©ration de base",
    command: "npm run test:generation",
    description: "Test des fonctions de g√©n√©ration de configuration et fichiers",
    critical: true
  },
  {
    name: "Architecture compl√®te",
    command: "npm run test:architecture", 
    description: "Test de tous les composants de l'architecture",
    critical: true
  },
  {
    name: "Workflow d'int√©gration",
    command: "npm run test:workflow",
    description: "Test du workflow complet de cr√©ation d'un site",
    critical: true
  }
];

interface TestResult {
  suite: string;
  success: boolean;
  output: string;
  duration: number;
  error?: string;
}

class FinalTestRunner {
  private results: TestResult[] = [];

  async runTestSuite(suite: TestSuite): Promise<TestResult> {
    console.log(`üß™ Ex√©cution: ${suite.name}...`);
    const startTime = Date.now();

    try {
      const output = execSync(suite.command, { 
        encoding: 'utf8',
        timeout: 60000 // 1 minute max par test
      });
      
      const duration = Date.now() - startTime;
      
      console.log(`‚úÖ ${suite.name} - ${duration}ms`);
      
      return {
        suite: suite.name,
        success: true,
        output,
        duration
      };
      
    } catch (error) {
      const duration = Date.now() - startTime;
      const errorOutput = error instanceof Error ? error.message : 'Erreur inconnue';
      
      console.log(`‚ùå ${suite.name} - ${duration}ms`);
      console.log(`   Erreur: ${errorOutput.split('\n')[0]}`);
      
      return {
        suite: suite.name,
        success: false,
        output: '',
        duration,
        error: errorOutput
      };
    }
  }

  async runAllTests() {
    console.log("üöÄ TESTS FINAUX DE LA PLATEFORME");
    console.log("=" .repeat(50));
    console.log();

    const startTime = Date.now();

    for (const suite of testSuites) {
      const result = await this.runTestSuite(suite);
      this.results.push(result);
      
      // Arr√™ter si un test critique √©choue
      if (!result.success && suite.critical) {
        console.log(`\n‚ö†Ô∏è  Test critique √©chou√©: ${suite.name}`);
        console.log("üõë Arr√™t des tests");
        break;
      }
    }

    const totalDuration = Date.now() - startTime;
    this.generateFinalReport(totalDuration);
  }

  private generateFinalReport(totalDuration: number) {
    console.log("\nüìä RAPPORT FINAL DE TESTS");
    console.log("=" .repeat(50));

    const totalTests = this.results.length;
    const passedTests = this.results.filter(r => r.success).length;
    const failedTests = totalTests - passedTests;
    const criticalTests = testSuites.filter(t => t.critical).length;
    const criticalPassed = this.results.filter(r => 
      r.success && testSuites.find(t => t.name === r.suite)?.critical
    ).length;

    // R√©sum√© global
    console.log(`\nüìà R√©sum√© global:`);
    console.log(`   ‚úÖ Tests r√©ussis: ${passedTests}/${totalTests}`);
    console.log(`   ‚ùå Tests √©chou√©s: ${failedTests}/${totalTests}`);
    console.log(`   üî• Tests critiques r√©ussis: ${criticalPassed}/${criticalTests}`);
    console.log(`   ‚è±Ô∏è  Dur√©e totale: ${Math.round(totalDuration / 1000)}s`);
    console.log(`   üìä Taux de r√©ussite: ${Math.round((passedTests/totalTests) * 100)}%`);

    // D√©tail par suite
    console.log(`\nüìã D√©tail des suites de tests:`);
    this.results.forEach(result => {
      const status = result.success ? "‚úÖ" : "‚ùå";
      const suite = testSuites.find(t => t.name === result.suite);
      const criticalBadge = suite?.critical ? " [CRITIQUE]" : "";
      
      console.log(`   ${status} ${result.suite}${criticalBadge} (${result.duration}ms)`);
      console.log(`       ${suite?.description}`);
      
      if (!result.success && result.error) {
        console.log(`       ‚ùå ${result.error.split('\n')[0]}`);
      }
    });

    // Statut de la plateforme
    console.log(`\nüèÜ STATUT DE LA PLATEFORME:`);
    
    if (criticalPassed === criticalTests) {
      console.log(`   üü¢ PR√äTE POUR LA PRODUCTION`);
      console.log(`   üöÄ Tous les tests critiques passent`);
      console.log(`   ‚ú® La plateforme peut √™tre d√©ploy√©e`);
      
      this.generateProductionChecklist();
    } else {
      console.log(`   üü° EN D√âVELOPPEMENT`);
      console.log(`   ‚ö†Ô∏è  ${criticalTests - criticalPassed} test(s) critique(s) √©chou√©(s)`);
      console.log(`   üîß Corrections n√©cessaires avant production`);
      
      this.generateTodoList();
    }

    // G√©n√©rer le rapport fichier
    this.generateReportFile(totalDuration);
    
    console.log(`\n‚ú® Tests finaux termin√©s !`);
  }

  private generateProductionChecklist() {
    console.log(`\n‚úÖ CHECKLIST PRODUCTION:`);
    console.log(`   üîß Configurer les variables d'environnement`);
    console.log(`   üóÑÔ∏è  Configurer la base de donn√©es de production`);
    console.log(`   üîë Configurer les tokens Vercel`);
    console.log(`   üåê Tester un d√©ploiement r√©el`);
    console.log(`   üìä Configurer le monitoring`);
    console.log(`   üí≥ Int√©grer le syst√®me de paiement`);
    console.log(`   üìß Configurer les notifications`);
  }

  private generateTodoList() {
    console.log(`\nüìù TODO AVANT PRODUCTION:`);
    
    const failedTests = this.results.filter(r => !r.success);
    failedTests.forEach(test => {
      console.log(`   üîß Corriger: ${test.suite}`);
      if (test.error) {
        console.log(`       ‚Üí ${test.error.split('\n')[0]}`);
      }
    });
  }

  private generateReportFile(totalDuration: number) {
    const report = {
      timestamp: new Date().toISOString(),
      summary: {
        totalTests: this.results.length,
        passed: this.results.filter(r => r.success).length,
        failed: this.results.filter(r => !r.success).length,
        duration: totalDuration,
        successRate: Math.round((this.results.filter(r => r.success).length / this.results.length) * 100)
      },
      results: this.results,
      productionReady: this.results.filter(r => !r.success && testSuites.find(t => t.name === r.suite)?.critical).length === 0
    };

    try {
      writeFileSync('test-report.json', JSON.stringify(report, null, 2));
      console.log(`\nüìÑ Rapport sauvegard√©: test-report.json`);
    } catch (error) {
      console.log(`\n‚ö†Ô∏è  Impossible de sauvegarder le rapport`);
    }
  }
}

// Test des pr√©requis syst√®me
function checkSystemRequirements() {
  console.log("üîç V√©rification des pr√©requis syst√®me...\n");

  try {
    // V√©rifier Node.js
    const nodeVersion = execSync('node --version', { encoding: 'utf8' }).trim();
    console.log(`‚úÖ Node.js: ${nodeVersion}`);

    // V√©rifier npm
    const npmVersion = execSync('npm --version', { encoding: 'utf8' }).trim();
    console.log(`‚úÖ npm: ${npmVersion}`);

    // V√©rifier tsx
    try {
      execSync('npx tsx --version', { encoding: 'utf8' });
      console.log(`‚úÖ tsx: Disponible`);
    } catch {
      console.log(`‚ùå tsx: Non trouv√©`);
      throw new Error("tsx requis pour les tests");
    }

    console.log(`‚úÖ Tous les pr√©requis sont satisfaits\n`);
    return true;

  } catch (error) {
    console.log(`‚ùå Pr√©requis manquants: ${error instanceof Error ? error.message : 'Erreur'}`);
    return false;
  }
}

// Point d'entr√©e principal
async function main() {
  console.log("üéØ TESTS FINAUX DE LA WEBSITE BUILDER PLATFORM");
  console.log("=" .repeat(60));
  console.log();

  // V√©rifier les pr√©requis
  if (!checkSystemRequirements()) {
    console.log("üõë Impossible de continuer sans les pr√©requis");
    process.exit(1);
  }

  const runner = new FinalTestRunner();
  
  try {
    await runner.runAllTests();
    process.exit(0);
  } catch (error) {
    console.error("üí• Erreur critique lors des tests finaux:", error);
    process.exit(1);
  }
}

main();