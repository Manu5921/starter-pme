import { NextRequest, NextResponse } from "next/server";
import { auth } from "@/lib/auth";
import { headers } from "next/headers";
import { db } from "@/db/drizzle";
import { clients, sites } from "@/db/schema";
import { eq, and } from "drizzle-orm";
import { VercelDeployer } from "@/lib/deployment/vercel-deployer";
import { ClientGenerator } from "@/lib/generators/client-generator";
import { z } from "zod";

const deploySchema = z.object({
  clientId: z.string().min(1, "Client ID requis"),
  forceRedeploy: z.boolean().optional().default(false)
});

// POST /api/deploy - D√©ploie un site client sur Vercel
export async function POST(request: NextRequest) {
  try {
    const session = await auth.api.getSession({
      headers: await headers(),
    });

    if (!session?.userId) {
      return NextResponse.json(
        { success: false, error: "Unauthorized" },
        { status: 401 }
      );
    }

    const body = await request.json();
    const { clientId, forceRedeploy } = deploySchema.parse(body);

    console.log(`üöÄ D√©marrage d√©ploiement pour client: ${clientId}`);

    // 1. R√©cup√©rer les donn√©es du client
    const [client] = await db
      .select()
      .from(clients)
      .where(
        and(
          eq(clients.id, clientId),
          eq(clients.userId, session.userId)
        )
      )
      .limit(1);

    if (!client) {
      return NextResponse.json(
        { success: false, error: "Client non trouv√©" },
        { status: 404 }
      );
    }

    // 2. V√©rifier si le site existe d√©j√†
    const [existingSite] = await db
      .select()
      .from(sites)
      .where(eq(sites.clientId, clientId))
      .limit(1);

    if (existingSite && existingSite.status === 'ready' && !forceRedeploy) {
      return NextResponse.json(
        { 
          success: false, 
          error: "Site d√©j√† d√©ploy√©. Utilisez forceRedeploy=true pour red√©ployer." 
        },
        { status: 409 }
      );
    }

    // 3. G√©n√©rer les fichiers du site
    const config = client.config;
    const siteFiles = (ClientGenerator as any).generateSiteFiles(config);

    console.log(`üìÅ Fichiers g√©n√©r√©s pour ${client.businessName}`);

    // 4. D√©ployer sur Vercel
    const deployer = new VercelDeployer();
    let deploymentResult;

    if (existingSite && existingSite.vercelProjectId && forceRedeploy) {
      // Red√©ploiement
      console.log(`üîÑ Red√©ploiement du site existant...`);
      deploymentResult = await deployer.redeploySite(clientId, siteFiles);
    } else {
      // Premier d√©ploiement
      console.log(`üÜï Premier d√©ploiement du site...`);
      deploymentResult = await deployer.deploySite(clientId, config, siteFiles);
    }

    // 5. Mettre √† jour le statut du client
    await db
      .update(clients)
      .set({ 
        status: 'live',
        updatedAt: new Date()
      })
      .where(eq(clients.id, clientId));

    console.log(`‚úÖ D√©ploiement r√©ussi: ${deploymentResult.url}`);

    return NextResponse.json({
      success: true,
      data: {
        client: {
          id: client.id,
          businessName: client.businessName,
          domain: client.domain
        },
        deployment: {
          url: deploymentResult.url,
          customDomain: client.domain,
          vercelProjectId: deploymentResult.project?.id || existingSite?.vercelProjectId,
          deployedAt: new Date()
        }
      },
      message: `Site d√©ploy√© avec succ√®s pour ${client.businessName}!`
    });

  } catch (error) {
    console.error("‚ùå Erreur d√©ploiement:", error);

    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { 
          success: false, 
          error: "Erreur de validation",
          details: error.errors 
        },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : "Erreur interne du serveur" 
      },
      { status: 500 }
    );
  }
}

// DELETE /api/deploy - Supprime un d√©ploiement
export async function DELETE(request: NextRequest) {
  try {
    const session = await auth.api.getSession({
      headers: await headers(),
    });

    if (!session?.userId) {
      return NextResponse.json(
        { success: false, error: "Unauthorized" },
        { status: 401 }
      );
    }

    const { searchParams } = new URL(request.url);
    const clientId = searchParams.get('clientId');

    if (!clientId) {
      return NextResponse.json(
        { success: false, error: "Client ID requis" },
        { status: 400 }
      );
    }

    // 1. V√©rifier que le client appartient √† l'utilisateur
    const [client] = await db
      .select()
      .from(clients)
      .where(
        and(
          eq(clients.id, clientId),
          eq(clients.userId, session.userId)
        )
      )
      .limit(1);

    if (!client) {
      return NextResponse.json(
        { success: false, error: "Client non trouv√©" },
        { status: 404 }
      );
    }

    // 2. R√©cup√©rer les infos du site
    const [site] = await db
      .select()
      .from(sites)
      .where(eq(sites.clientId, clientId))
      .limit(1);

    if (!site) {
      return NextResponse.json(
        { success: false, error: "Aucun d√©ploiement trouv√©" },
        { status: 404 }
      );
    }

    // 3. Supprimer le projet Vercel
    if (site.vercelProjectId) {
      const deployer = new VercelDeployer();
      await deployer.deleteDeployment(site.vercelProjectId);
    }

    // 4. Supprimer l'enregistrement du site
    await db
      .delete(sites)
      .where(eq(sites.id, site.id));

    // 5. Remettre le client en d√©veloppement
    await db
      .update(clients)
      .set({ 
        status: 'development',
        updatedAt: new Date()
      })
      .where(eq(clients.id, clientId));

    return NextResponse.json({
      success: true,
      message: `D√©ploiement supprim√© pour ${client.businessName}`
    });

  } catch (error) {
    console.error("‚ùå Erreur suppression d√©ploiement:", error);
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : "Erreur interne du serveur" 
      },
      { status: 500 }
    );
  }
}

// GET /api/deploy/status - V√©rifie le statut d'un d√©ploiement
export async function GET(request: NextRequest) {
  try {
    const session = await auth.api.getSession({
      headers: await headers(),
    });

    if (!session?.userId) {
      return NextResponse.json(
        { success: false, error: "Unauthorized" },
        { status: 401 }
      );
    }

    const { searchParams } = new URL(request.url);
    const clientId = searchParams.get('clientId');

    if (!clientId) {
      return NextResponse.json(
        { success: false, error: "Client ID requis" },
        { status: 400 }
      );
    }

    // 1. R√©cup√©rer les infos du site
    const [siteInfo] = await db
      .select({
        site: sites,
        client: {
          id: clients.id,
          businessName: clients.businessName,
          domain: clients.domain,
          status: clients.status
        }
      })
      .from(sites)
      .innerJoin(clients, eq(sites.clientId, clients.id))
      .where(
        and(
          eq(sites.clientId, clientId),
          eq(clients.userId, session.userId)
        )
      )
      .limit(1);

    if (!siteInfo) {
      return NextResponse.json(
        { success: false, error: "Site non trouv√©" },
        { status: 404 }
      );
    }

    // 2. R√©cup√©rer les stats Vercel si disponibles
    let vercelStats = null;
    if (siteInfo.site.vercelDeploymentId) {
      try {
        const deployer = new VercelDeployer();
        vercelStats = await deployer.getDeploymentStats(siteInfo.site.vercelDeploymentId);
      } catch (error) {
        console.warn('Impossible de r√©cup√©rer les stats Vercel:', error);
      }
    }

    return NextResponse.json({
      success: true,
      data: {
        client: siteInfo.client,
        site: siteInfo.site,
        vercelStats,
        isLive: siteInfo.client.status === 'live' && siteInfo.site.status === 'ready'
      }
    });

  } catch (error) {
    console.error("‚ùå Erreur v√©rification statut:", error);
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : "Erreur interne du serveur" 
      },
      { status: 500 }
    );
  }
}